<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gravação de Vídeo</title>

    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/css/tailwind.css">
   
</head>
<body>


 <div class="container flex flex-col p-4">
  
   <div id="frameRecord">
      <video id="preview" autoplay playsinline class="rounded-sm"></video>
      <div class="flex justify-center">
        <button id="startRecording" type="button" class="bg-green-500 rounded-md m-2 text-white p-1" onclick="recording()"> Gravar</button>
        <button id="recording" class="bg-gray-300 p-1 m-2 rounded-md hidden"> Gravando... </button>
      
        <button id="stopRecording" disabled class="p-1 bg-blue-300 text-gray-800 m-2 rounded-md" onclick="recordStoped()">Parar Gravação</button>

        
      </div>
   </div>

   <div id="previewRecord" style="display: none;">
      <video id="recordedVideo" controls style="display: block;"></video>

   
      <div class="flex justify-center">
        <button id="upload" class="bg-green-500 text-white p-1 rounded-md  m-2" disabled>Enviar</button>
        <button id="back" class="bg-blue-300 p-1 rounded-md m-2 text-gray-800" onclick="recordAgain()" > Gravar novamente</button>
      </div>
     
   </div>
 </div>

  <script>
   
    let mediaRecorder;
    let recordedChunks = [];

    // Função para iniciar a câmera
   
    async function startCamera() {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });

      const streamVideoOnly = await navigator.mediaDevices.getUserMedia({ video: true });
      document.getElementById('preview').srcObject = streamVideoOnly;
      mediaRecorder = new MediaRecorder(stream);

      // Evento para capturar dados do vídeo durante a gravação
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          recordedChunks.push(event.data);
        }
      };

      mediaRecorder.onstop = async() => {
        const recordedBlob = new Blob(recordedChunks, { type: 'video/webm' });
        const recordedVideo = document.getElementById('recordedVideo');
        recordedVideo.src = URL.createObjectURL(recordedBlob);
        document.getElementById('previewRecord').style.display = 'block';
        document.getElementById('upload').disabled = false;
        document.getElementById('frameRecord').style.display = 'none';
      
      };    
    }

     
  

    document.getElementById('startRecording').onclick = async() => {
     document.getElementById('recording').style.display = 'block';
      document.getElementById('startRecording').style.display = 'none';

      recordedChunks = [];
      mediaRecorder.start();
      document.getElementById('stopRecording').disabled = false;
      document.getElementById('startRecording').disabled = true;
    };

    document.getElementById('stopRecording').onclick = async() => {
      document.getElementById('recording').style.display = 'none';
     document.getElementById('startRecording').style.display = 'block';

      mediaRecorder.stop();
      document.getElementById('startRecording').disabled = false;
      document.getElementById('stopRecording').disabled = true;

    };
    function recordAgain(){
      document.getElementById('frameRecord').style.display = 'block';
      document.getElementById('previewRecord').style.display = 'none';


    }


    document.getElementById('upload').onclick = async () => {

      const uploadButton = document.getElementById('upload');    

      uploadButton.innerHTML = 'Enviando...';
      uploadButton.disabled = true;

      const randomName = new Date().getTime()
      const blob = new Blob(recordedChunks, { type: 'video/webm' });
      const formData = new FormData();
      formData.append('video', blob, randomName + '_mensagem_video.webm');

    const baseUrl = "<%= url %>"



     const uploadReponse = await fetch( baseUrl + '/upload', {
        method: 'POST',
        body: formData

      }); 
      if(uploadReponse.status === 200){
        uploadButton.innerHTML = 'Enviar';
        uploadButton.disabled = false;

        alert('Vídeo enviado com sucesso!');
      }else{
         uploadButton.innerHTML = 'Enviar';
         uploadButton.disabled = false;
        console.log(" status da requisição -",uploadReponse.status )
        alert('Falha ao enviar vídeo!');
      }
    };
   

    startCamera();
   
  </script>
</body>
</html>
